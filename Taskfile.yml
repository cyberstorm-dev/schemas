version: '3'

vars:
  SCHEMAS_DIR: cyberstorm
  DIST_DIR: dist

tasks:
  default:
    desc: Show available tasks
    silent: true
    cmds:
      - task --list

  validate:
    desc: Full validation pipeline - lint, generate, package, and check all targets
    deps: [deps, lint]
    cmds:
      - task: check:all

  validate:version:
    desc: Validate version consistency across project files
    vars:
      VERSION: "{{.CLI_ARGS}}"
    cmds:
      - |
        if [ -z "{{.VERSION}}" ]; then
          echo "‚ùå Usage: task validate:version -- <version>"
          echo "Example: task validate:version -- 1.0.5"
          exit 1
        fi
        
        echo "üîç Checking version consistency across project files..."
        echo "Expected version: {{.VERSION}}"
        echo
        
        ERRORS=0
        
        # Check pyproject.toml
        if [ -f "pyproject.toml" ]; then
          PYPROJECT_VERSION=$(python3 -c "import tomllib; f=open('pyproject.toml','rb'); data=tomllib.load(f); print(data['project']['version'])")
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          if [ "$PYPROJECT_VERSION" != "{{.VERSION}}" ]; then
            echo "‚ùå Version mismatch in pyproject.toml: expected {{.VERSION}}, found $PYPROJECT_VERSION"
            ERRORS=$((ERRORS + 1))
          else
            echo "‚úÖ pyproject.toml version matches"
          fi
        else
          echo "‚ùå pyproject.toml not found"
          ERRORS=$((ERRORS + 1))
        fi
        
        # Check package.json
        if [ -f "package.json" ]; then
          PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "package.json version: $PACKAGE_VERSION"
          if [ "$PACKAGE_VERSION" != "{{.VERSION}}" ]; then
            echo "‚ùå Version mismatch in package.json: expected {{.VERSION}}, found $PACKAGE_VERSION"
            ERRORS=$((ERRORS + 1))
          else
            echo "‚úÖ package.json version matches"
          fi
        else
          echo "‚ùå package.json not found"
          ERRORS=$((ERRORS + 1))
        fi
        
        # Check package-lock.json
        if [ -f "package-lock.json" ]; then
          PACKAGE_LOCK_VERSION=$(node -e "console.log(require('./package-lock.json').version)")
          echo "package-lock.json version: $PACKAGE_LOCK_VERSION"
          if [ "$PACKAGE_LOCK_VERSION" != "{{.VERSION}}" ]; then
            echo "‚ùå Version mismatch in package-lock.json: expected {{.VERSION}}, found $PACKAGE_LOCK_VERSION"
            ERRORS=$((ERRORS + 1))
          else
            echo "‚úÖ package-lock.json version matches"
          fi
        else
          echo "‚ùå package-lock.json not found"
          ERRORS=$((ERRORS + 1))
        fi
        
        echo
        if [ $ERRORS -gt 0 ]; then
          echo "‚ùå Found $ERRORS version inconsistency error(s)"
          echo "Please update all version fields to match {{.VERSION}} before releasing"
          exit 1
        else
          echo "‚úÖ All version checks passed - ready to release {{.VERSION}}"
        fi

  validate:credentials:testpypi:
    desc: Validate TestPyPI credentials are available
    cmds:
      - |
        if [ -z "$TEST_PYPI_API_TOKEN" ]; then
          echo "‚ùå TEST_PYPI_API_TOKEN environment variable not set"
          echo "Please set TEST_PYPI_API_TOKEN to publish to TestPyPI"
          echo "Get token at: https://test.pypi.org/manage/account/token/"
          exit 1
        fi
        echo "‚úÖ TestPyPI credentials available"

  validate:credentials:pypi:
    desc: Validate PyPI credentials are available
    cmds:
      - |
        if [ -z "$PYPI_API_TOKEN" ]; then
          echo "‚ùå PYPI_API_TOKEN environment variable not set"
          echo "Please set PYPI_API_TOKEN to publish to PyPI"
          echo "Get token at: https://pypi.org/manage/account/token/"
          exit 1
        fi
        echo "‚úÖ PyPI credentials available"

  validate:credentials:npm:
    desc: Validate NPM credentials are available
    cmds:
      - |
        if [ -z "$NPM_TOKEN" ]; then
          echo "‚ùå NPM_TOKEN environment variable not set"
          echo "Please set NPM_TOKEN to publish to NPM"
          echo "Get token at: https://www.npmjs.com/settings/tokens"
          exit 1
        fi
        echo "‚úÖ NPM credentials available"

  validate:credentials:bsr:
    desc: Validate BSR credentials are available
    cmds:
      - |
        if [ -z "$BUF_TOKEN" ]; then
          echo "‚ùå BUF_TOKEN environment variable not set"
          echo "Please set BUF_TOKEN to publish to BSR"
          echo "Generate token with: buf registry token create --name 'local-publish'"
          exit 1
        fi
        echo "‚úÖ BSR credentials available"

  publish:python:testpypi:
    desc: Publish Python package to TestPyPI with credential validation
    deps: [validate:credentials:testpypi, package:python]
    cmds:
      - ./scripts/publish-python.sh --test

  publish:python:pypi:
    desc: Publish Python package to PyPI with credential validation  
    deps: [validate:credentials:pypi, package:python]
    cmds:
      - ./scripts/publish-python.sh

  publish:typescript:npm:
    desc: Publish TypeScript package to NPM with credential validation
    deps: [validate:credentials:npm, package:typescript]
    cmds:
      - ./scripts/publish-typescript.sh

  publish:bsr:
    desc: Publish all modules to BSR with credential validation
    deps: [validate:credentials:bsr, buf:build]
    cmds:
      - echo "$BUF_TOKEN" | buf registry login --username token --token-stdin
      - task: buf:push
      - echo "üîç Verifying BSR publication..."
      - buf registry repository info buf.build/cyberstorm/attestor
      - buf registry repository info buf.build/cyberstorm/crypto
      - echo "‚úÖ BSR publication verified"

  clean:
    desc: Clean generated files
    cmds:
      - rm -rf {{.DIST_DIR}}
      - mkdir -p {{.DIST_DIR}}/typescript {{.DIST_DIR}}/python {{.DIST_DIR}}/go {{.DIST_DIR}}/openapi {{.DIST_DIR}}/docs
      - mkdir -p logs

  install:
    desc: Install buf CLI if not present
    cmds:
      - ./scripts/install-buf.sh

  deps:
    desc: Update proto dependencies
    deps: [install]
    cmds:
      - cd {{.SCHEMAS_DIR}}/attestor/v1 && buf dep update
      - cd {{.SCHEMAS_DIR}}/crypto/v1 && buf dep update

  lint:
    desc: Lint proto files
    deps: [deps]
    cmds:
      - cd {{.SCHEMAS_DIR}}/attestor/v1 && buf lint

  format:
    desc: Format proto files
    deps: [install]
    cmds:
      - cd {{.SCHEMAS_DIR}}/attestor/v1 && buf format -w

  install:typescript:
    desc: Install dependencies for JavaScript generation
    cmds:
      - mkdir -p logs
      - npm install --silent >logs/npm-install.log 2>&1
      - echo "JavaScript generation dependencies installed"

  generate:typescript:
    desc: Generate JavaScript clients using buf
    deps: [install, install:typescript]
    cmds:
      - mkdir -p {{.DIST_DIR}}/typescript logs
      - buf generate --template buf.gen.yaml {{.SCHEMAS_DIR}}/attestor/v1 >logs/buf-typescript-attestor.log 2>&1
      - buf generate --template buf.gen.yaml {{.SCHEMAS_DIR}}/crypto/v1 >logs/buf-typescript-crypto.log 2>&1
      - echo "JavaScript files generated in {{.DIST_DIR}}/typescript/"

  generate:python:
    desc: Generate Python clients  
    deps: [install]
    cmds:
      - mkdir -p {{.DIST_DIR}}/python logs
      - buf generate --template buf.gen.yaml {{.SCHEMAS_DIR}}/attestor/v1 >logs/buf-python-attestor.log 2>&1
      # - buf generate --template buf.gen.yaml {{.SCHEMAS_DIR}}/crypto/v1 >logs/buf-python-crypto.log 2>&1  # Temporarily disabled - crypto generation fails after multiple runs
      - python3 scripts/fix-python-namespace.py
      - echo "Python files generated in {{.DIST_DIR}}/python/"

  generate:go:
    desc: Generate Go clients
    deps: [install]  
    cmds:
      - mkdir -p {{.DIST_DIR}}/go logs
      - buf generate --template buf.gen.yaml {{.SCHEMAS_DIR}}/attestor/v1 >logs/buf-go-attestor.log 2>&1
      # - buf generate --template buf.gen.yaml {{.SCHEMAS_DIR}}/crypto/v1 >logs/buf-go-crypto.log 2>&1  # Temporarily disabled - crypto generation fails after multiple runs
      - cp templates/go.mod.template {{.DIST_DIR}}/go/go.mod
      - echo "Go files generated in {{.DIST_DIR}}/go/"

  generate:openapi:
    desc: Generate OpenAPI/Swagger specs
    deps: [install]
    cmds:
      - mkdir -p {{.DIST_DIR}}/openapi {{.DIST_DIR}}/docs logs
      - buf generate --template buf.gen.yaml {{.SCHEMAS_DIR}}/attestor/v1 >logs/buf-openapi-attestor.log 2>&1
      - buf generate --template buf.gen.yaml {{.SCHEMAS_DIR}}/crypto/v1 >logs/buf-openapi-crypto.log 2>&1
      - ./scripts/convert-swagger-to-openapi.sh
      - echo "Swagger 2.0 and OpenAPI 3.0 files generated in {{.DIST_DIR}}/openapi/"

  generate:all:
    desc: Generate clients for all languages
    deps: [lint, clean]
    cmds:
      - task: generate:openapi
      - task: generate:typescript
      - task: generate:python  
      - task: generate:go

  build:
    desc: Full build - lint, format, and generate all clients
    cmds:
      - task: format
      - task: lint
      - task: generate:all

  breaking:
    desc: Check for breaking changes against main branch  
    deps: [install]
    cmds:
      - buf breaking {{.SCHEMAS_DIR}}/attestor/v1 --against '.git#branch=main,subdir={{.SCHEMAS_DIR}}/attestor/v1'

  check:typescript:
    desc: Validate packaged JavaScript files exist and are syntactically valid
    deps: [package:typescript]
    cmds:
      - ./scripts/check-typescript.sh

  install:python:
    desc: Install Python package in development mode
    cmds:
      - ./scripts/install-python.sh

  check:python:
    desc: Validate packaged Python package works
    deps: [package:python]
    cmds:
      - ./scripts/check-python.sh

  check:go:
    desc: Validate packaged Go package works
    deps: [package:go]
    cmds:
      - ./scripts/check-go.sh

  check:openapi:
    desc: Validate generated OpenAPI specs are valid JSON
    deps: [generate:openapi]
    cmds:
      - echo "üîç Checking OpenAPI generation..."
      - python3 scripts/validate-swagger.py
      - python3 scripts/validate-openapi.py
      - echo "‚úÖ OpenAPI generation validation complete"

  check:all:
    desc: Run all generation checks
    deps: [clean, install]
    cmds:
      - task: check:openapi
      - task: check:typescript
      - task: check:python
      - task: check:go
      - echo "üéâ All generation checks passed!"


  docs:
    desc: Serve OpenAPI docs with Swagger UI (requires generate:openapi)
    deps: [generate:openapi]
    cmds:
      - ./scripts/serve-docs.sh

  package:typescript:
    desc: Package TypeScript/JavaScript for npm distribution
    deps: [generate:typescript]
    cmds:
      - ./scripts/build-typescript.sh

  package:python:
    desc: Package Python for PyPI distribution
    deps: [generate:python]
    cmds:
      - ./scripts/install-python.sh
      - ./scripts/build-python.sh

  package:go:
    desc: Package Go module for distribution
    deps: [generate:go]
    cmds:
      - ./scripts/build-go.sh

  package:all:
    desc: Package all language targets for distribution
    cmds:
      - task: package:typescript
      - task: package:python
      - task: package:go

  publish:typescript:
    desc: Publish TypeScript/JavaScript package to npm
    deps: [package:typescript]
    cmds:
      - ./scripts/publish-typescript.sh

  publish:typescript:test:
    desc: Publish TypeScript/JavaScript package to npm with beta tag
    deps: [package:typescript]
    cmds:
      - ./scripts/publish-typescript.sh --test

  publish:python:
    desc: Publish Python package to PyPI
    deps: [package:python]
    cmds:
      - ./scripts/publish-python.sh

  publish:python:test:
    desc: Publish Python package to TestPyPI
    deps: [package:python]
    cmds:
      - ./scripts/publish-python.sh --test

  publish:go:
    desc: Publish Go module via Git tag
    deps: [package:go]
    cmds:
      - echo "Usage - ./scripts/publish-go.sh <version> [--test]"
      - echo "Example - ./scripts/publish-go.sh v1.0.0"

  publish:go:test:
    desc: Test Go module publishing (dry run)
    deps: [package:go]
    cmds:
      - echo "Usage - ./scripts/publish-go.sh <version> --test"
      - echo "Example - ./scripts/publish-go.sh v1.0.0 --test"

  # Buf Schema Registry (BSR) tasks
  buf:format:
    desc: Format protobuf files using buf
    deps: [install]
    cmds:
      - echo "üé® Formatting protobuf files..."
      - cd {{.SCHEMAS_DIR}}/attestor/v1 && buf format --write
      - cd {{.SCHEMAS_DIR}}/crypto/v1 && buf format --write
      - echo "‚úÖ Protobuf files formatted"

  buf:lint:
    desc: Lint protobuf files using buf
    deps: [deps]
    cmds:
      - echo "üîç Linting protobuf files..."
      - cd {{.SCHEMAS_DIR}}/attestor/v1 && buf lint
      - cd {{.SCHEMAS_DIR}}/crypto/v1 && buf lint
      - echo "‚úÖ Protobuf files passed lint checks"

  buf:build:
    desc: Build protobuf files using buf
    deps: [buf:lint]
    cmds:
      - echo "üî® Building protobuf files..."
      - cd {{.SCHEMAS_DIR}}/attestor/v1 && buf build
      - cd {{.SCHEMAS_DIR}}/crypto/v1 && buf build
      - echo "‚úÖ Protobuf build successful"

  buf:breaking:attestor:
    desc: Check attestor module for breaking changes against main
    deps: [install]
    cmds:
      - echo "üîç Checking attestor for breaking changes..."
      - buf breaking {{.SCHEMAS_DIR}}/attestor/v1 --against '.git#branch=main,subdir={{.SCHEMAS_DIR}}/attestor/v1'
      - echo "‚úÖ No breaking changes detected in attestor module"

  buf:breaking:crypto:
    desc: Check crypto module for breaking changes against main
    deps: [install]
    cmds:
      - echo "üîç Checking crypto for breaking changes..."
      - buf breaking {{.SCHEMAS_DIR}}/crypto/v1 --against '.git#branch=main,subdir={{.SCHEMAS_DIR}}/crypto/v1'
      - echo "‚úÖ No breaking changes detected in crypto module"

  buf:breaking:
    desc: Check all modules for breaking changes
    cmds:
      - task: buf:breaking:attestor
      - task: buf:breaking:crypto

  buf:push:attestor:
    desc: Push attestor module to Buf Schema Registry
    deps: [install, buf:build]
    cmds:
      - echo "üì§ Pushing attestor module to buf.build/cyberstorm/attestor..."
      - cd {{.SCHEMAS_DIR}}/attestor/v1 && buf push
      - echo "‚úÖ Successfully pushed attestor to BSR"

  buf:push:crypto:
    desc: Push crypto module to Buf Schema Registry  
    deps: [install, buf:build]
    cmds:
      - echo "üì§ Pushing crypto module to buf.build/cyberstorm/crypto..."
      - cd {{.SCHEMAS_DIR}}/crypto/v1 && buf push
      - echo "‚úÖ Successfully pushed crypto to BSR"

  buf:push:
    desc: Push all modules to their respective BSR repositories
    cmds:
      - task: buf:push:attestor
      - task: buf:push:crypto

  buf:push:draft:
    desc: Push all modules to BSR with draft label
    deps: [install, buf:build]
    cmds:
      - echo "üì§ Pushing modules to buf.build/cyberstorm/attestor and crypto with draft label..."
      - cd {{.SCHEMAS_DIR}}/attestor/v1 && buf push --label draft
      - cd {{.SCHEMAS_DIR}}/crypto/v1 && buf push --label draft
      - echo "‚úÖ Successfully pushed all modules to BSR with draft label"

  buf:push:create:
    desc: Create BSR repositories and push all modules (first time only)
    deps: [install, buf:build]
    cmds:
      - echo "üì§ Creating buf.build/cyberstorm/attestor and crypto repositories..."
      - cd {{.SCHEMAS_DIR}}/attestor/v1 && buf push --create
      - cd {{.SCHEMAS_DIR}}/crypto/v1 && buf push --create
      - echo "‚úÖ Successfully created BSR repositories and pushed all modules"
