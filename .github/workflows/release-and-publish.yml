name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.5)'
        required: true
        type: string
      publish_to_testpypi:
        description: 'Publish to TestPyPI'
        required: false
        type: boolean
        default: false
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: false
        type: boolean
        default: false
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

permissions:
  contents: write
  packages: write

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Version must match pattern: X.Y.Z or X.Y.Z-suffix (e.g., 1.0.5 or 1.0.5-beta.1)"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Validate version consistency across files
      run: |
        VERSION="${{ github.event.inputs.version }}"
        ERRORS=0
        
        echo "🔍 Checking version consistency across project files..."
        echo "Expected version: $VERSION"
        echo
        
        # Check pyproject.toml
        if [ -f "pyproject.toml" ]; then
          PYPROJECT_VERSION=$(python -c "
import tomllib
with open('pyproject.toml', 'rb') as f:
    data = tomllib.load(f)
    print(data['project']['version'])
")
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          if [ "$PYPROJECT_VERSION" != "$VERSION" ]; then
            echo "❌ Version mismatch in pyproject.toml: expected $VERSION, found $PYPROJECT_VERSION"
            ERRORS=$((ERRORS + 1))
          else
            echo "✅ pyproject.toml version matches"
          fi
        else
          echo "❌ pyproject.toml not found"
          ERRORS=$((ERRORS + 1))
        fi
        
        # Check package.json
        if [ -f "package.json" ]; then
          PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "package.json version: $PACKAGE_VERSION"
          if [ "$PACKAGE_VERSION" != "$VERSION" ]; then
            echo "❌ Version mismatch in package.json: expected $VERSION, found $PACKAGE_VERSION"
            ERRORS=$((ERRORS + 1))
          else
            echo "✅ package.json version matches"
          fi
        else
          echo "❌ package.json not found"
          ERRORS=$((ERRORS + 1))
        fi
        
        # Check package-lock.json
        if [ -f "package-lock.json" ]; then
          PACKAGE_LOCK_VERSION=$(node -e "console.log(require('./package-lock.json').version)")
          echo "package-lock.json version: $PACKAGE_LOCK_VERSION"
          if [ "$PACKAGE_LOCK_VERSION" != "$VERSION" ]; then
            echo "❌ Version mismatch in package-lock.json: expected $VERSION, found $PACKAGE_LOCK_VERSION"
            ERRORS=$((ERRORS + 1))
          else
            echo "✅ package-lock.json version matches"
          fi
        else
          echo "❌ package-lock.json not found"
          ERRORS=$((ERRORS + 1))
        fi
        
        echo
        if [ $ERRORS -gt 0 ]; then
          echo "❌ Found $ERRORS version inconsistency error(s)"
          echo "Please update all version fields to match $VERSION before releasing"
          exit 1
        else
          echo "✅ All version checks passed - ready to release $VERSION"
        fi

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x
        
    - name: Install dependencies
      run: |
        task deps
        pip install protobuf>=4.0.0 grpcio>=1.50.0 googleapis-common-protos>=1.60.0
        
    - name: Build and package all targets
      run: task package:all
      
    - name: Run validation checks
      run: task check:all

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: |
          dist/python-dist/
          dist/typescript/
          dist/go/
          dist/openapi/
        retention-days: 30

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: write
    outputs:
      release-created: ${{ steps.release.outputs.release-created }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Create release archives
      run: |
        echo "📦 Creating release archives..."
        echo "Current directory: $(pwd)"
        echo "Dist directory contents:"
        ls -la dist/
        echo ""
        
        cd dist
        
        # Create archives for each language
        tar -czf ../cyberstorm-schemas-typescript-${{ github.event.inputs.version }}.tar.gz typescript/
        tar -czf ../cyberstorm-schemas-go-${{ github.event.inputs.version }}.tar.gz go/
        tar -czf ../cyberstorm-schemas-openapi-${{ github.event.inputs.version }}.tar.gz openapi/cyberstorm/
        
        # Copy Python distribution files using actual generated names
        whl_file=$(find python-dist -name "*.whl" -type f | head -1)
        if [ -n "$whl_file" ]; then
          cp "$whl_file" ../$(basename "$whl_file")
          echo "✅ Copied wheel: $(basename "$whl_file")"
        else
          echo "❌ No .whl files found in python-dist/"
          exit 1
        fi
        
        src_file=$(find python-dist -name "*.tar.gz" -type f | head -1)
        if [ -n "$src_file" ]; then
          cp "$src_file" ../$(basename "$src_file")
          echo "✅ Copied source: $(basename "$src_file")"
        else
          echo "❌ No .tar.gz files found in python-dist/"
          exit 1
        fi
        
        echo "✅ All archives created successfully"

    - name: Create GitHub Release
      id: release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
        files: |
          cyberstorm-schemas-typescript-${{ github.event.inputs.version }}.tar.gz
          cyberstorm-schemas-go-${{ github.event.inputs.version }}.tar.gz
          cyberstorm-schemas-openapi-${{ github.event.inputs.version }}.tar.gz
          cyberstorm_schemas-${{ github.event.inputs.version }}-py3-none-any.whl
          cyberstorm_schemas-${{ github.event.inputs.version }}.tar.gz
        body: |
          ## Release v${{ github.event.inputs.version }}
          
          This release contains generated client libraries for multiple languages:
          
          ### 📦 Available Packages
          
          - **TypeScript/JavaScript**: `cyberstorm-schemas-typescript-${{ github.event.inputs.version }}.tar.gz`
          - **Python**: `cyberstorm_schemas-${{ github.event.inputs.version }}-py3-none-any.whl` (wheel) and `cyberstorm_schemas-${{ github.event.inputs.version }}.tar.gz` (source)
          - **Go**: `cyberstorm-schemas-go-${{ github.event.inputs.version }}.tar.gz`
          - **OpenAPI**: `cyberstorm-schemas-openapi-${{ github.event.inputs.version }}.tar.gz`
          
          ### 🚀 Usage
          
          **TypeScript/JavaScript**:
          ```bash
          npm install ./cyberstorm-schemas-typescript-${{ github.event.inputs.version }}.tar.gz
          ```
          
          **Python**:
          ```bash
          pip install ./cyberstorm_schemas-${{ github.event.inputs.version }}-py3-none-any.whl
          ```
          
          **Go**:
          ```bash
          go get github.com/cyberstorm-dev/schemas/go@v${{ github.event.inputs.version }}
          ```
          
          All packages are generated from the same Protocol Buffer schemas and are fully compatible.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set release created output
      run: echo "release-created=true" >> $GITHUB_OUTPUT

  publish-to-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: create-github-release
    if: ${{ github.event.inputs.publish_to_testpypi == 'true' && needs.create-github-release.outputs.release-created == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Install dependencies
      run: task install:python

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Install twine
      run: |
        if [ -f "./venv/bin/pip" ]; then
          ./venv/bin/pip install twine --quiet
        else
          python -m pip install twine --quiet
        fi

    - name: Check package before upload
      run: |
        if [ -f "./venv/bin/twine" ]; then
          ./venv/bin/twine check dist/python-dist/*
        else
          python -m twine check dist/python-dist/*
        fi

    - name: List package files
      run: |
        echo "📦 Package files to upload to TestPyPI:"
        ls -la dist/python-dist/

    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        if [ -f "./venv/bin/twine" ]; then
          ./venv/bin/twine upload --repository testpypi --verbose --skip-existing dist/python-dist/*
        else
          python -m twine upload --repository testpypi --verbose --skip-existing dist/python-dist/*
        fi
        echo "✅ Successfully published to TestPyPI"

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-github-release, publish-to-testpypi]
    if: ${{ github.event.inputs.publish_to_pypi == 'true' && needs.create-github-release.outputs.release-created == 'true' && always() && (needs.publish-to-testpypi.result == 'success' || needs.publish-to-testpypi.result == 'skipped') }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Install dependencies
      run: task install:python

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Install twine
      run: |
        if [ -f "./venv/bin/pip" ]; then
          ./venv/bin/pip install twine --quiet
        else
          python -m pip install twine --quiet
        fi

    - name: Check package before upload
      run: |
        if [ -f "./venv/bin/twine" ]; then
          ./venv/bin/twine check dist/python-dist/*
        else
          python -m twine check dist/python-dist/*
        fi

    - name: List package files
      run: |
        echo "📦 Package files to upload to PyPI:"
        ls -la dist/python-dist/

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -f "./venv/bin/twine" ]; then
          ./venv/bin/twine upload --verbose dist/python-dist/*
        else
          python -m twine upload --verbose dist/python-dist/*
        fi
        echo "✅ Successfully published to PyPI"