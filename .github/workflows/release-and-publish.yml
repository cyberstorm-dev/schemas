name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.5)'
        required: true
        type: string
      publish_to_testpypi:
        description: 'Publish to TestPyPI'
        required: false
        type: boolean
        default: false
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: false
        type: boolean
        default: false
      publish_to_bsr:
        description: 'Publish to Buf Schema Registry (BSR)'
        required: false
        type: boolean
        default: false
      publish_to_npm:
        description: 'Publish to NPM Registry'
        required: false
        type: boolean
        default: false
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

permissions:
  contents: write
  packages: write

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Version must match pattern: X.Y.Z or X.Y.Z-suffix (e.g., 1.0.5 or 1.0.5-beta.1)"
          exit 1
        fi
        echo "‚úÖ Version format is valid: $VERSION"

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Task
      uses: arduino/setup-task@v1
      
    - name: Validate Taskfile.yml targets
      run: |
        echo "üîç Checking required Taskfile targets..."
        REQUIRED_TARGETS=("deps" "package:all" "check:all" "install:python" "install" "buf:build" "buf:push" "install:typescript" "package:typescript" "publish:python:testpypi" "publish:python:pypi" "publish:typescript:npm" "publish:bsr")
        ERRORS=0
        
        if [ ! -f "Taskfile.yml" ]; then
          echo "‚ùå Taskfile.yml not found"
          exit 1
        fi
        
        echo "Available tasks:"
        TASK_LIST=$(task --list)
        echo "$TASK_LIST"
        echo
        
        for target in "${REQUIRED_TARGETS[@]}"; do
          if echo "$TASK_LIST" | grep -q "^\* $target:"; then
            echo "‚úÖ Found required task: $target"
          else
            echo "‚ùå Required task target missing: $target"
            ERRORS=$((ERRORS + 1))
          fi
        done
        
        if [ $ERRORS -gt 0 ]; then
          echo "‚ùå Missing $ERRORS required Taskfile targets"
          exit 1
        fi
        echo "‚úÖ All required Taskfile targets found"
      
    - name: Validate version consistency across files
      run: task validate:version -- ${{ github.event.inputs.version }}

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x
        
    - name: Install dependencies
      run: |
        task deps
        pip install protobuf>=4.0.0 grpcio>=1.50.0 googleapis-common-protos>=1.60.0
        
    - name: Build and package all targets
      run: task package:all
      
    - name: Run validation checks
      run: task check:all

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: |
          dist/python-dist/
          dist/typescript/
          dist/go/
          dist/openapi/
        retention-days: 30

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: write
    outputs:
      release-created: ${{ steps.verify_release.outputs.release-created }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Create release archives
      run: |
        echo "üì¶ Creating release archives..."
        echo "Current directory: $(pwd)"
        echo "Dist directory contents:"
        ls -la dist/
        echo ""
        
        cd dist
        
        # Create archives for each language
        tar -czf ../cyberstorm-schemas-typescript-${{ github.event.inputs.version }}.tar.gz typescript/
        tar -czf ../cyberstorm-schemas-go-${{ github.event.inputs.version }}.tar.gz go/
        tar -czf ../cyberstorm-schemas-openapi-${{ github.event.inputs.version }}.tar.gz openapi/cyberstorm/
        
        # Copy Python distribution files using actual generated names
        whl_file=$(find python-dist -name "*.whl" -type f | head -1)
        if [ -n "$whl_file" ]; then
          cp "$whl_file" ../$(basename "$whl_file")
          echo "‚úÖ Copied wheel: $(basename "$whl_file")"
        else
          echo "‚ùå No .whl files found in python-dist/"
          exit 1
        fi
        
        src_file=$(find python-dist -name "*.tar.gz" -type f | head -1)
        if [ -n "$src_file" ]; then
          cp "$src_file" ../$(basename "$src_file")
          echo "‚úÖ Copied source: $(basename "$src_file")"
        else
          echo "‚ùå No .tar.gz files found in python-dist/"
          exit 1
        fi
        
        echo "‚úÖ All archives created successfully"

    - name: Check if release exists
      id: check_release
      run: |
        if gh release view v${{ github.event.inputs.version }} >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "üìã Release v${{ github.event.inputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "üÜï Release v${{ github.event.inputs.version }} will be created"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      id: release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
        files: |
          cyberstorm-schemas-typescript-${{ github.event.inputs.version }}.tar.gz
          cyberstorm-schemas-go-${{ github.event.inputs.version }}.tar.gz
          cyberstorm-schemas-openapi-${{ github.event.inputs.version }}.tar.gz
          cyberstorm_schemas-${{ github.event.inputs.version }}-py3-none-any.whl
          cyberstorm_schemas-${{ github.event.inputs.version }}.tar.gz
        body: |
          ## Release v${{ github.event.inputs.version }}
          
          This release contains generated client libraries for multiple languages:
          
          ### üì¶ Available Packages
          
          - **TypeScript/JavaScript**: `cyberstorm-schemas-typescript-${{ github.event.inputs.version }}.tar.gz`
          - **Python**: `cyberstorm_schemas-${{ github.event.inputs.version }}-py3-none-any.whl` (wheel) and `cyberstorm_schemas-${{ github.event.inputs.version }}.tar.gz` (source)
          - **Go**: `cyberstorm-schemas-go-${{ github.event.inputs.version }}.tar.gz`
          - **OpenAPI**: `cyberstorm-schemas-openapi-${{ github.event.inputs.version }}.tar.gz`
          
          ### üöÄ Usage
          
          **TypeScript/JavaScript**:
          ```bash
          npm install ./cyberstorm-schemas-typescript-${{ github.event.inputs.version }}.tar.gz
          ```
          
          **Python**:
          ```bash
          pip install ./cyberstorm_schemas-${{ github.event.inputs.version }}-py3-none-any.whl
          ```
          
          **Go**:
          ```bash
          go get github.com/cyberstorm-dev/schemas/go@v${{ github.event.inputs.version }}
          ```
          
          All packages are generated from the same Protocol Buffer schemas and are fully compatible.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify release and set output
      id: verify_release
      run: |
        echo "üîç Verifying release v${{ github.event.inputs.version }} exists..."
        if gh release view v${{ github.event.inputs.version }} >/dev/null 2>&1; then
          echo "release-created=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Release v${{ github.event.inputs.version }} verified - publishing jobs can proceed"
        else
          echo "release-created=false" >> $GITHUB_OUTPUT
          echo "‚ùå Release v${{ github.event.inputs.version }} not found - publishing jobs will be skipped"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: create-github-release
    if: ${{ github.event.inputs.publish_to_testpypi == 'true' && needs.create-github-release.outputs.release-created == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Publish to TestPyPI
      env:
        TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: task publish:python:testpypi

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-github-release, publish-to-testpypi]
    if: ${{ github.event.inputs.publish_to_pypi == 'true' && needs.create-github-release.outputs.release-created == 'true' && always() && (needs.publish-to-testpypi.result == 'success' || needs.publish-to-testpypi.result == 'skipped') }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: task publish:python:pypi

  publish-to-bsr:
    name: Publish to Buf Schema Registry
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: ${{ github.event.inputs.publish_to_bsr == 'true' && needs.create-github-release.outputs.release-created == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Publish to BSR
      env:
        BUF_TOKEN: ${{ secrets.BUF_TOKEN }}
      run: task publish:bsr

  publish-to-npm:
    name: Publish to NPM Registry
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: ${{ github.event.inputs.publish_to_npm == 'true' && needs.create-github-release.outputs.release-created == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Publish to NPM
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: task publish:typescript:npm