name: Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        type: string
      publish_to_pypi:
        description: 'Publish Python package to PyPI'
        required: false
        type: boolean
        default: false
      publish_to_testpypi:
        description: 'Publish to TestPyPI first'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

permissions:
  contents: write
  packages: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Debug inputs
      run: |
        echo "publish_to_pypi: '${{ github.event.inputs.publish_to_pypi }}'"
        echo "publish_to_testpypi: '${{ github.event.inputs.publish_to_testpypi }}'"
        echo "publish_to_pypi type: $(echo '${{ github.event.inputs.publish_to_pypi }}' | jq -R type)"
        echo "publish_to_testpypi type: $(echo '${{ github.event.inputs.publish_to_testpypi }}' | jq -R type)"

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Install dependencies
      run: task install:python

    - name: Validate version in pyproject.toml
      run: |
        CURRENT_VERSION=$(python -c "import tomllib; f=open('pyproject.toml','rb'); data=tomllib.load(f); print(data['project']['version'])")
        if [ "$CURRENT_VERSION" != "${{ github.event.inputs.version }}" ]; then
          echo "Error: Version mismatch in pyproject.toml!"
          echo "Current version: $CURRENT_VERSION"
          echo "Requested release version: ${{ github.event.inputs.version }}"
          exit 1
        fi
        echo "pyproject.toml version validation passed: $CURRENT_VERSION"

  build-and-test:
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x

    - name: Install dependencies
      run: |
        task deps
        pip install protobuf>=4.0.0 grpcio>=1.50.0 googleapis-common-protos>=1.60.0
        
    - name: Run full validation
      run: task validate

    - name: Build package
      run: task package:python

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/python-dist/
        retention-days: 30

  publish-testpypi:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ github.event.inputs.publish_to_testpypi == 'true' }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Install dependencies
      run: task install:python

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/python-dist/

    - name: Install twine
      run: |
        if [ -f "./venv/bin/pip" ]; then
          ./venv/bin/pip install twine --quiet
        else
          python -m pip install twine --quiet
        fi

    - name: Check package before upload
      run: |
        if [ -f "./venv/bin/twine" ]; then
          ./venv/bin/twine check dist/python-dist/*
        else
          python -m twine check dist/python-dist/*
        fi

    - name: List package files
      run: |
        echo "Package files to upload:"
        ls -la dist/python-dist/

    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        if [ -f "./venv/bin/twine" ]; then
          ./venv/bin/twine upload --repository testpypi --verbose --skip-existing dist/python-dist/*
        else
          python -m twine upload --repository testpypi --verbose --skip-existing dist/python-dist/*
        fi

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/python-dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: |
          ## Cyberstorm Attestor Schemas v${{ github.event.inputs.version }}
          
          ### What's Changed
          - Protocol Buffer schemas for Cyberstorm Attestor service
          - Generated client libraries for multiple languages
          - Ethereum attestation and verification capabilities
          
          ### Installation
          
          ```bash
          pip install cyberstorm-attestor-schemas==${{ github.event.inputs.version }}
          ```
          
          ### Documentation
          - [Repository](https://github.com/cyberstorm-dev/attestor-schemas)
          - [Issues](https://github.com/cyberstorm-dev/attestor-schemas/issues)
          
          ### Changelog
          See the [full changelog](https://github.com/cyberstorm-dev/attestor-schemas/blob/main/CHANGELOG.md) for detailed changes.
        files: |
          dist/python-dist/*.tar.gz
          dist/python-dist/*.whl
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [build-and-test, publish-testpypi, create-release]
    if: ${{ github.event.inputs.publish_to_pypi == 'true' && always() && (needs.publish-testpypi.result == 'success' || needs.publish-testpypi.result == 'skipped') }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Install dependencies
      run: task install:python

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/python-dist/

    - name: Install twine
      run: |
        if [ -f "./venv/bin/pip" ]; then
          ./venv/bin/pip install twine --quiet
        else
          python -m pip install twine --quiet
        fi

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: task publish:python
